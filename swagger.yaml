swagger: "2.0"
info:
  title: "Storage API"
  version: "1.0.0"
  description: "API zur Verwaltung von Storage Items inklusive zugehöriger Nährstoff-Daten, Basket Items und User-Management."
host: ""
basePath: "/"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'"

paths:
  /register:
    post:
      summary: "Register a new user"
      description: "Erstellt einen neuen Benutzer."
      parameters:
        - in: body
          name: body
          description: "Benutzerdaten für die Registrierung"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        "201":
          description: "User created"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "User already exists"
          schema:
            $ref: "#/definitions/Error"

  /login:
    post:
      summary: "Login"
      description: "Authentifiziert einen Benutzer und liefert einen JWT-Token zurück."
      parameters:
        - in: body
          name: body
          description: "Login-Daten"
          required: true
          schema:
            $ref: "#/definitions/LoginInput"
      responses:
        "200":
          description: "Login erfolgreich"
          schema:
            $ref: "#/definitions/TokenResponse"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Invalid credentials"
          schema:
            $ref: "#/definitions/Error"

  /user:
    get:
      summary: "Get current user"
      description: "Gibt den aktuell authentifizierten Benutzer zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Benutzerdaten"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: "Update user"
      description: "Aktualisiert den aktuell authentifizierten Benutzer."
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: "Aktualisierte Benutzerdaten"
          required: true
          schema:
            $ref: "#/definitions/UserUpdate"
      responses:
        "200":
          description: "User updated successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: "Delete user"
      description: "Löscht den aktuell authentifizierten Benutzer."
      security:
        - Bearer: []
      responses:
        "200":
          description: "User deleted successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"

  /basket:
    get:
      summary: "Get all basket items"
      description: "Gibt alle Basket Items zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Liste der Basket Items"
          schema:
            type: array
            items:
              $ref: "#/definitions/BasketItem"
    post:
      summary: "Add a basket item"
      description: "Fügt ein neues Basket Item hinzu oder inkrementiert die Menge, falls das Item bereits existiert."
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: "Basket Item-Daten"
          required: true
          schema:
            $ref: "#/definitions/BasketItemInput"
      responses:
        "201":
          description: "Basket Item erfolgreich hinzugefügt"
          schema:
            $ref: "#/definitions/BasketItem"
        "400":
          description: "Ungültige Eingabedaten"
          schema:
            $ref: "#/definitions/Error"

  /basket/{item_id}:
    parameters:
      - name: item_id
        in: path
        description: "Die ID des Basket Items"
        required: true
        type: integer
    put:
      summary: "Update a basket item"
      description: "Aktualisiert die Menge (amount) eines Basket Items."
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: "Neuer Wert für amount"
          required: true
          schema:
            type: object
            properties:
              amount:
                type: integer
                example: 2
      responses:
        "201":
          description: "Basket Item erfolgreich aktualisiert"
          schema:
            $ref: "#/definitions/BasketItem"
        "400":
          description: "Ungültige Eingabedaten"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: "Delete a basket item"
      description: "Löscht ein Basket Item anhand der ID."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Basket Item erfolgreich gelöscht"
          schema:
            $ref: "#/definitions/BasketItem"
        "404":
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"

  /items/bulk:
    post:
      summary: "Add multiple storage items at once"
      description: "Fügt mehrere Storage Items gleichzeitig hinzu, inklusive deren Nährstoffdaten, sofern vorhanden."
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: "Liste von Storage Items, die hinzugefügt werden sollen."
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/StorageItemInput"
      responses:
        "201":
          description: "Items added successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "400":
          description: "Invalid input data"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict - duplicate item exists"
          schema:
            $ref: "#/definitions/Error"

  /items:
    get:
      summary: "Get all storage items"
      description: "Gibt alle Storage Items zurück. Optional kann über den Query-Parameter `q` nach Namen gesucht werden."
      security:
        - Bearer: []
      parameters:
        - in: query
          name: q
          description: "Suchbegriff, um Items anhand des Namens zu filtern."
          required: false
          type: string
      responses:
        "200":
          description: "Liste der Storage Items"
          schema:
            type: array
            items:
              $ref: "#/definitions/StorageItem"
    post:
      summary: "Add a new storage item"
      description: "Fügt ein neues Storage Item hinzu. Optional können auch Nährstoff-Daten mitgesendet werden."
      security:
        - Bearer: []
      parameters:
        - in: body
          name: body
          description: "Das hinzuzufügende Storage Item."
          required: true
          schema:
            $ref: "#/definitions/StorageItemInput"
      responses:
        "201":
          description: "Item added successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "400":
          description: "Invalid input data"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Item with the same name, storageLocation, and unit already exists."
          schema:
            $ref: "#/definitions/Error"

  /items/{item_id}:
    put:
      summary: "Update an existing storage item"
      description: "Aktualisiert ein bestehendes Storage Item anhand der übergebenen ID."
      security:
        - Bearer: []
      parameters:
        - name: item_id
          in: path
          description: "Die ID des zu aktualisierenden Storage Items."
          required: true
          type: integer
        - in: body
          name: body
          description: "Die zu aktualisierenden Felder des Storage Items."
          required: true
          schema:
            $ref: "#/definitions/StorageItemUpdate"
      responses:
        "200":
          description: "Item updated successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "400":
          description: "Invalid input data"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"
    get:
      summary: "Get a specific storage item by ID"
      description: "Gibt ein spezifisches Storage Item zurück, basierend auf der übergebenen ID."
      security:
        - Bearer: []
      parameters:
        - name: item_id
          in: path
          description: "Die ID des abzurufenden Storage Items."
          required: true
          type: integer
      responses:
        "200":
          description: "Das Storage Item mit seinen Details"
          schema:
            $ref: "#/definitions/StorageItem"
        "404":
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: "Delete a storage item"
      description: "Löscht ein Storage Item anhand der ID."
      security:
        - Bearer: []
      parameters:
        - name: item_id
          in: path
          description: "Die ID des zu löschenden Storage Items."
          required: true
          type: integer
      responses:
        "200":
          description: "Item deleted successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "404":
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"

  /items/{item_id}/nutrients:
    put:
      summary: "Update the nutrients for a specific storage item"
      description: "Aktualisiert die Nährstoff-Daten für das Storage Item mit der angegebenen ID. Bestehende Nährstoffdaten werden ersetzt."
      security:
        - Bearer: []
      parameters:
        - name: item_id
          in: path
          description: "Die ID des Storage Items, dessen Nährstoff-Daten aktualisiert werden sollen."
          required: true
          type: integer
        - in: body
          name: body
          description: "Die neuen Nährstoff-Daten für das Storage Item."
          required: true
          schema:
            $ref: "#/definitions/NutrientInput"
      responses:
        "200":
          description: "Nutrients updated successfully"
          schema:
            $ref: "#/definitions/SuccessMessage"
        "400":
          description: "Invalid input data"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Item not found"
          schema:
            $ref: "#/definitions/Error"

  /categories:
    get:
      summary: "Get all categories"
      description: "Gibt alle Kategorien zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Liste der Kategorien"
          schema:
            type: array
            items:
              $ref: "#/definitions/Category"

  /storage-locations:
    get:
      summary: "Get storage locations"
      description: "Gibt alle Storage Locations zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Liste der Storage Locations"
          schema:
            type: array
            items:
              $ref: "#/definitions/StorageLocation"

  /item-units:
    get:
      summary: "Get item units"
      description: "Gibt alle Item Units zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Liste der Item Units"
          schema:
            type: array
            items:
              $ref: "#/definitions/Unit"

  /package-units:
    get:
      summary: "Get package units"
      description: "Gibt alle Package Units zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Liste der Package Units"
          schema:
            type: array
            items:
              $ref: "#/definitions/Unit"

  /nutrient-units:
    get:
      summary: "Get nutrient units"
      description: "Gibt alle Nutrient Units zurück."
      security:
        - Bearer: []
      responses:
        "200":
          description: "Liste der Nutrient Units"
          schema:
            type: array
            items:
              $ref: "#/definitions/Unit"

security:
  - Bearer: []

definitions:
  UserInput:
    type: object
    required:
      - username
      - password
      - email
    properties:
      username:
        type: string
      password:
        type: string
      email:
        type: string
      image:
        type: string
  LoginInput:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
  TokenResponse:
    type: object
    properties:
      access_token:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      email:
        type: string
      image:
        type: string
  UserUpdate:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
      image:
        type: string
  SuccessMessage:
    type: object
    properties:
      message:
        type: string
  BasketItemInput:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      categories:
        type: array
        items:
          type: string
      icon:
        type: string
  BasketItem:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      amount:
        type: integer
      categories:
        type: array
        items:
          type: string
      icon:
        type: string
  StorageItemInput:
    type: object
    required:
      - name
      - amount
      - lowestAmount
      - midAmount
      - unit
      - storageLocation
    properties:
      name:
        type: string
      amount:
        type: integer
      categories:
        type: array
        items:
          type: string
      lowestAmount:
        type: integer
      midAmount:
        type: integer
      unit:
        type: string
      packageQuantity:
        type: integer
      packageUnit:
        type: string
      storageLocation:
        type: string
      icon:
        type: string
      nutrients:
        $ref: "#/definitions/NutrientInput"
  StorageItemUpdate:
    type: object
    properties:
      name:
        type: string
      amount:
        type: integer
      categories:
        type: array
        items:
          type: string
      lowestAmount:
        type: integer
      midAmount:
        type: integer
      unit:
        type: string
      packageQuantity:
        type: integer
      packageUnit:
        type: string
      storageLocation:
        type: string
      icon:
        type: string
  StorageItem:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      amount:
        type: integer
      categories:
        type: array
        items:
          type: string
      lowestAmount:
        type: integer
      midAmount:
        type: integer
      unit:
        type: string
      packageQuantity:
        type: integer
      packageUnit:
        type: string
      storageLocation:
        type: string
      icon:
        type: string
      nutrients:
        $ref: "#/definitions/Nutrient"
  NutrientInput:
    type: object
    required:
      - description
      - unit
      - amount
    properties:
      description:
        type: string
      unit:
        type: string
        description: "Einheit der Nährwertangaben (z.B. 'g' oder 'ml')."
      amount:
        type: number
        description: "Bezugsmenge, z.B. 100 für 'pro 100g' bzw. 'pro 100ml'."
      values:
        type: array
        items:
          $ref: "#/definitions/NutrientValueInput"
  Nutrient:
    type: object
    properties:
      id:
        type: integer
      description:
        type: string
      unit:
        type: string
      amount:
        type: number
      values:
        type: array
        items:
          $ref: "#/definitions/NutrientValue"
  NutrientValueInput:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      color:
        type: string
      values:
        type: array
        items:
          $ref: "#/definitions/NutrientTypeInput"
  NutrientValue:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      color:
        type: string
      values:
        type: array
        items:
          $ref: "#/definitions/NutrientType"
  NutrientTypeInput:
    type: object
    required:
      - typ
      - value
    properties:
      typ:
        type: string
        description: "Angabe des Einheitentyps, z.B. 'kcal', 'KJ' oder 'g'."
      value:
        type: number
  NutrientType:
    type: object
    properties:
      id:
        type: integer
      typ:
        type: string
      value:
        type: number
  Category:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  StorageLocation:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  Unit:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
  Error:
    type: object
    properties:
      error:
        type: string
